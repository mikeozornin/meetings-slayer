import React, { useState, useEffect, useCallback } from 'react';
import { GameBoard } from './GameBoard';
import { useKeyboard } from '../../hooks/useKeyboard';
import { useGameLoop } from '../../hooks/useGameLoop';
import { soundManager } from '../../utils/soundEffects';
// import { 
//   Ball, 
//   Paddle, 
//   Brick, 
//   GameStateData, 
//   GameSettings,
//   Meeting 
// } from '../../types';
type Ball = any;
type Paddle = any;
type Brick = any;
type GameStateData = any;
type GameSettings = any;
type Meeting = any;
import { 
  createInitialGameState, 
  createInitialBall, 
  createInitialPaddle, 
  createBrickGrid,
  getLevelSettings,
  filterMeetingsByWeek,
  checkVictory,
  checkGameOver
} from '../../utils/gameState';

interface GameEngineProps {
  meetings: Meeting[];
  onGameStateChange?: (state: GameStateData) => void;
}

export const GameEngine: React.FC<GameEngineProps> = ({ 
  meetings, 
  onGameStateChange 
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const [gameState, setGameState] = useState<GameStateData>(createInitialGameState());
  const [settings, setSettings] = useState<GameSettings>(getLevelSettings(1));
  
  // –ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
  const [ball, setBall] = useState<Ball>(createInitialBall(createInitialPaddle(800, 600)));
  const [paddle, setPaddle] = useState<Paddle>(createInitialPaddle(800, 600));
  const [bricks, setBricks] = useState<Brick[]>([]);
  
  // –†–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  const [dimensions, setDimensions] = useState({ width: 800, height: 600 });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const [isLoggingEnabled, setIsLoggingEnabled] = useState(false);
  
  // –•—É–∫–∏
  const keyState = useKeyboard(gameState.state === 'playing');
  const { launchBall } = useGameLoop({
    ball,
    paddle,
    bricks,
    gameState,
    settings,
    dimensions,
    keyState,
    isLoggingEnabled,
    onBallUpdate: setBall,
    onPaddleUpdate: setPaddle,
    onBricksUpdate: setBricks,
    onGameStateUpdate: setGameState,
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å—Ç—Ä–µ—á –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  const loadLevelMeetings = useCallback((level: number) => {
    const levelMeetings = filterMeetingsByWeek(meetings, level);
    if (levelMeetings.length > 0) {
      const newBricks = createBrickGrid(levelMeetings, dimensions.width, level);
      setBricks(newBricks);
      return true; // –£—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ
    }
    return false; // –ù–µ—Ç –≤—Å—Ç—Ä–µ—á –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
  }, [meetings, dimensions.width]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å—Ç—Ä–µ—á
  useEffect(() => {
    if (meetings.length > 0) {
      const levelLoaded = loadLevelMeetings(gameState.level);
      if (levelLoaded) {
        setGameState((prev: GameStateData) => ({ ...prev, state: 'playing' }));
      }
    }
  }, [meetings, gameState.level, loadLevelMeetings]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  useEffect(() => {
    const updateDimensions = () => {
      const container = document.getElementById('game-container');
      if (container) {
        const rect = container.getBoundingClientRect();
        // –í—ã—á–∏—Ç–∞–µ–º –≤—Å–µ –æ—Ç—Å—Ç—É–ø—ã:
        // - border-2 –Ω–∞ –≤–Ω–µ—à–Ω–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ = 2px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        // - border-4 –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ = 4px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã  
        // - inset-1 = 4px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        // - margin: 4px = 4px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        // - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è = 40px —Å–≤–µ—Ä—Ö—É
        const outerBorder = 4; // border-2 = 2px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        const innerBorder = 8; // border-4 = 4px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        const insetMargin = 8; // inset-1 = 4px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        const additionalMargin = 8; // margin: 4px = 4px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        const headerHeight = 40; // –≤—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        
        const totalHorizontalOffset = outerBorder + innerBorder + insetMargin + additionalMargin;
        const totalVerticalOffset = outerBorder + innerBorder + insetMargin + additionalMargin + headerHeight;
        
        const gameWidth = rect.width - totalHorizontalOffset;
        const gameHeight = rect.height - totalVerticalOffset;
        
        if (isLoggingEnabled) {
          console.log('Game dimensions updated:', {
            containerRect: { width: rect.width, height: rect.height },
            offsets: { horizontal: totalHorizontalOffset, vertical: totalVerticalOffset },
            gameSize: { width: gameWidth, height: gameHeight }
          });
        }
        
        setDimensions({ width: gameWidth, height: gameHeight });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        setPaddle(createInitialPaddle(gameWidth, gameHeight));
        setBall(createInitialBall(createInitialPaddle(gameWidth, gameHeight)));
      }
    };

    updateDimensions();
    window.addEventListener('resize', updateDimensions);
    return () => window.removeEventListener('resize', updateDimensions);
  }, [isLoggingEnabled]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã/–ø—Ä–æ–∏–≥—Ä—ã—à–∞
  useEffect(() => {
    if (gameState.state !== 'playing') return;

    if (checkVictory(bricks)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
      const nextLevel = gameState.level + 1;
      const nextLevelMeetings = filterMeetingsByWeek(meetings, nextLevel);
      
      if (nextLevelMeetings.length > 0) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        const newLevel = nextLevel;
        const newSettings = getLevelSettings(newLevel);
        
        setGameState((prev: GameStateData) => ({ 
          ...prev, 
          level: newLevel,
          state: 'levelComplete'
        }));
        
        setSettings(newSettings);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        setTimeout(() => {
          const levelLoaded = loadLevelMeetings(newLevel);
          if (levelLoaded) {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º—è—á –∏ —Ä–∞–∫–µ—Ç–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            const newPaddle = createInitialPaddle(dimensions.width, dimensions.height);
            const newBall = createInitialBall(newPaddle);
            setPaddle(newPaddle);
            setBall(newBall);
            setGameState((prev: GameStateData) => ({ ...prev, state: 'playing' }));
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è - –ø–æ–±–µ–¥–∞
            setGameState((prev: GameStateData) => ({ ...prev, state: 'victory' }));
          }
        }, 2000); // –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
        
        if (isLoggingEnabled) {
          console.log(`üéâ Level ${gameState.level} completed! Moving to level ${newLevel}`);
        }
      } else {
        // –ù–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è - –ø–æ–ª–Ω–∞—è –ø–æ–±–µ–¥–∞
        setGameState((prev: GameStateData) => ({ ...prev, state: 'victory' }));
      }
    } else if (checkGameOver(ball, dimensions.height, gameState.lives)) {
      setGameState((prev: GameStateData) => ({ ...prev, state: 'gameOver' }));
    }
  }, [bricks, ball, dimensions.height, gameState.lives, gameState.state, gameState.level, meetings, loadLevelMeetings, dimensions.width, isLoggingEnabled]);

  // –£–¥–∞–ª—è–µ–º —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞
  useEffect(() => {
    const destroyedBricks = bricks.filter(brick => brick.isDestroyed);
    if (destroyedBricks.length > 0) {
      // –£–¥–∞–ª—è–µ–º —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      const timer = setTimeout(() => {
        setBricks(prev => prev.filter(brick => !brick.isDestroyed));
      }, 1000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      
      return () => clearTimeout(timer);
    }
  }, [bricks]);

  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    onGameStateChange?.(gameState);
  }, [gameState, onGameStateChange]);

  // –°–±—Ä–æ—Å –∏–≥—Ä—ã
  const resetGame = useCallback(() => {
    const initialSettings = getLevelSettings(1);
    setGameState(createInitialGameState());
    setSettings(initialSettings);
    setBall(createInitialBall(paddle));
    setPaddle(createInitialPaddle(dimensions.width, dimensions.height));
    if (meetings.length > 0) {
      const levelLoaded = loadLevelMeetings(1);
      if (levelLoaded) {
        setGameState((prev: GameStateData) => ({ ...prev, state: 'playing' }));
      }
    }
  }, [meetings, dimensions, paddle, loadLevelMeetings]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º—è—á–∞
  const handleLaunchBall = useCallback(() => {
    if (gameState.state === 'playing') {
      launchBall();
    }
  }, [gameState.state, launchBall]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
  const handleRestart = useCallback(() => {
    resetGame();
  }, [resetGame]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É
  const handleToggleLogging = useCallback(() => {
    setIsLoggingEnabled(prev => {
      const newState = !prev;
      console.log(`üêõ Debug logging ${newState ? 'ENABLED' : 'DISABLED'}`);
      return newState;
    });
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
  const handleToggleSound = useCallback(() => {
    soundManager.toggleSound();
  }, []);

  return (
    <div className="w-full h-full flex flex-col">
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–µ */}
      <div className="flex items-center justify-between p-4 bg-card border-b">
        <div className="flex items-center gap-4">
          <div className="text-sm">
            <span className="text-muted-foreground">Score: </span>
            <span className="font-semibold">{gameState.score}</span>
          </div>
          <div className="text-sm">
            <span className="text-muted-foreground">Lives: </span>
            <span className="font-semibold">{gameState.lives}</span>
          </div>
          <div className="text-sm">
            <span className="text-muted-foreground">Level: </span>
            <span className="font-semibold">{gameState.level}</span>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <button
            onClick={handleToggleSound}
            className={`px-3 py-1 rounded text-xs transition-colors ${
              soundManager.isSoundEnabled() 
                ? 'bg-green-500 text-white hover:bg-green-600' 
                : 'bg-gray-500 text-white hover:bg-gray-600'
            }`}
          >
            üîä {soundManager.isSoundEnabled() ? 'ON' : 'OFF'}
          </button>
          
          {(gameState.state === 'gameOver' || gameState.state === 'victory') && (
            <button
              onClick={handleRestart}
              className="px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
            >
              Play Again
            </button>
          )}
        </div>
      </div>

      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
      <div id="game-container" className="flex-1 p-4">
        <GameBoard
          ball={ball}
          paddle={paddle}
          bricks={bricks}
          gameState={gameState}
          onLaunchBall={handleLaunchBall}
          onToggleLogging={handleToggleLogging}
        />
      </div>
    </div>
  );
}; 